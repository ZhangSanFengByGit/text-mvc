package com.external.vnluservice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-09-18")
public class NLUOperator {

    public interface Iface {

        public java.util.List<UContent> vUnderstand(java.lang.String text, java.lang.String type) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void vUnderstand(java.lang.String text, java.lang.String type, org.apache.thrift.async.AsyncMethodCallback<java.util.List<UContent>> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public java.util.List<UContent> vUnderstand(java.lang.String text, java.lang.String type) throws org.apache.thrift.TException
        {
            send_vUnderstand(text, type);
            return recv_vUnderstand();
        }

        public void send_vUnderstand(java.lang.String text, java.lang.String type) throws org.apache.thrift.TException
        {
            vUnderstand_args args = new vUnderstand_args();
            args.setText(text);
            args.setType(type);
            sendBase("vUnderstand", args);
        }

        public java.util.List<UContent> recv_vUnderstand() throws org.apache.thrift.TException
        {
            vUnderstand_result result = new vUnderstand_result();
            receiveBase(result, "vUnderstand");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "vUnderstand failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void vUnderstand(java.lang.String text, java.lang.String type, org.apache.thrift.async.AsyncMethodCallback<java.util.List<UContent>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            vUnderstand_call method_call = new vUnderstand_call(text, type, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class vUnderstand_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<UContent>> {
            private java.lang.String text;
            private java.lang.String type;
            public vUnderstand_call(java.lang.String text, java.lang.String type, org.apache.thrift.async.AsyncMethodCallback<java.util.List<UContent>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.text = text;
                this.type = type;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("vUnderstand", org.apache.thrift.protocol.TMessageType.CALL, 0));
                vUnderstand_args args = new vUnderstand_args();
                args.setText(text);
                args.setType(type);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<UContent> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_vUnderstand();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("vUnderstand", new vUnderstand());
            return processMap;
        }

        public static class vUnderstand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, vUnderstand_args> {
            public vUnderstand() {
                super("vUnderstand");
            }

            public vUnderstand_args getEmptyArgsInstance() {
                return new vUnderstand_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public vUnderstand_result getResult(I iface, vUnderstand_args args) throws org.apache.thrift.TException {
                vUnderstand_result result = new vUnderstand_result();
                result.success = iface.vUnderstand(args.text, args.type);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("vUnderstand", new vUnderstand());
            return processMap;
        }

        public static class vUnderstand<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, vUnderstand_args, java.util.List<UContent>> {
            public vUnderstand() {
                super("vUnderstand");
            }

            public vUnderstand_args getEmptyArgsInstance() {
                return new vUnderstand_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<UContent>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<UContent>>() {
                    public void onComplete(java.util.List<UContent> o) {
                        vUnderstand_result result = new vUnderstand_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        vUnderstand_result result = new vUnderstand_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, vUnderstand_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<UContent>> resultHandler) throws org.apache.thrift.TException {
                iface.vUnderstand(args.text, args.type,resultHandler);
            }
        }

    }

    public static class vUnderstand_args implements org.apache.thrift.TBase<vUnderstand_args, vUnderstand_args._Fields>, java.io.Serializable, Cloneable, Comparable<vUnderstand_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("vUnderstand_args");

        private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new vUnderstand_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new vUnderstand_argsTupleSchemeFactory();

        public java.lang.String text; // required
        public java.lang.String type; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            TEXT((short)1, "text"),
            TYPE((short)2, "type");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // TEXT
                        return TEXT;
                    case 2: // TYPE
                        return TYPE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(vUnderstand_args.class, metaDataMap);
        }

        public vUnderstand_args() {
        }

        public vUnderstand_args(
                java.lang.String text,
                java.lang.String type)
        {
            this();
            this.text = text;
            this.type = type;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public vUnderstand_args(vUnderstand_args other) {
            if (other.isSetText()) {
                this.text = other.text;
            }
            if (other.isSetType()) {
                this.type = other.type;
            }
        }

        public vUnderstand_args deepCopy() {
            return new vUnderstand_args(this);
        }

        @Override
        public void clear() {
            this.text = null;
            this.type = null;
        }

        public java.lang.String getText() {
            return this.text;
        }

        public vUnderstand_args setText(java.lang.String text) {
            this.text = text;
            return this;
        }

        public void unsetText() {
            this.text = null;
        }

        /** Returns true if field text is set (has been assigned a value) and false otherwise */
        public boolean isSetText() {
            return this.text != null;
        }

        public void setTextIsSet(boolean value) {
            if (!value) {
                this.text = null;
            }
        }

        public java.lang.String getType() {
            return this.type;
        }

        public vUnderstand_args setType(java.lang.String type) {
            this.type = type;
            return this;
        }

        public void unsetType() {
            this.type = null;
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return this.type != null;
        }

        public void setTypeIsSet(boolean value) {
            if (!value) {
                this.type = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case TEXT:
                    if (value == null) {
                        unsetText();
                    } else {
                        setText((java.lang.String)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case TEXT:
                    return getText();

                case TYPE:
                    return getType();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case TEXT:
                    return isSetText();
                case TYPE:
                    return isSetType();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof vUnderstand_args)
                return this.equals((vUnderstand_args)that);
            return false;
        }

        public boolean equals(vUnderstand_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_text = true && this.isSetText();
            boolean that_present_text = true && that.isSetText();
            if (this_present_text || that_present_text) {
                if (!(this_present_text && that_present_text))
                    return false;
                if (!this.text.equals(that.text))
                    return false;
            }

            boolean this_present_type = true && this.isSetType();
            boolean that_present_type = true && that.isSetType();
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (!this.type.equals(that.type))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
            if (isSetText())
                hashCode = hashCode * 8191 + text.hashCode();

            hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
            if (isSetType())
                hashCode = hashCode * 8191 + type.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(vUnderstand_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetText()).compareTo(other.isSetText());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetText()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("vUnderstand_args(");
            boolean first = true;

            sb.append("text:");
            if (this.text == null) {
                sb.append("null");
            } else {
                sb.append(this.text);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            if (this.type == null) {
                sb.append("null");
            } else {
                sb.append(this.type);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class vUnderstand_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public vUnderstand_argsStandardScheme getScheme() {
                return new vUnderstand_argsStandardScheme();
            }
        }

        private static class vUnderstand_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<vUnderstand_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, vUnderstand_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // TEXT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.text = iprot.readString();
                                struct.setTextIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.type = iprot.readString();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, vUnderstand_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.text != null) {
                    oprot.writeFieldBegin(TEXT_FIELD_DESC);
                    oprot.writeString(struct.text);
                    oprot.writeFieldEnd();
                }
                if (struct.type != null) {
                    oprot.writeFieldBegin(TYPE_FIELD_DESC);
                    oprot.writeString(struct.type);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class vUnderstand_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public vUnderstand_argsTupleScheme getScheme() {
                return new vUnderstand_argsTupleScheme();
            }
        }

        private static class vUnderstand_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<vUnderstand_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, vUnderstand_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetText()) {
                    optionals.set(0);
                }
                if (struct.isSetType()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetText()) {
                    oprot.writeString(struct.text);
                }
                if (struct.isSetType()) {
                    oprot.writeString(struct.type);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, vUnderstand_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.text = iprot.readString();
                    struct.setTextIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.type = iprot.readString();
                    struct.setTypeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class vUnderstand_result implements org.apache.thrift.TBase<vUnderstand_result, vUnderstand_result._Fields>, java.io.Serializable, Cloneable, Comparable<vUnderstand_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("vUnderstand_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new vUnderstand_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new vUnderstand_resultTupleSchemeFactory();

        public java.util.List<UContent> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UContent.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(vUnderstand_result.class, metaDataMap);
        }

        public vUnderstand_result() {
        }

        public vUnderstand_result(
                java.util.List<UContent> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public vUnderstand_result(vUnderstand_result other) {
            if (other.isSetSuccess()) {
                java.util.List<UContent> __this__success = new java.util.ArrayList<UContent>(other.success.size());
                for (UContent other_element : other.success) {
                    __this__success.add(new UContent(other_element));
                }
                this.success = __this__success;
            }
        }

        public vUnderstand_result deepCopy() {
            return new vUnderstand_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<UContent> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(UContent elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<UContent>();
            }
            this.success.add(elem);
        }

        public java.util.List<UContent> getSuccess() {
            return this.success;
        }

        public vUnderstand_result setSuccess(java.util.List<UContent> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<UContent>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof vUnderstand_result)
                return this.equals((vUnderstand_result)that);
            return false;
        }

        public boolean equals(vUnderstand_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(vUnderstand_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("vUnderstand_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class vUnderstand_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public vUnderstand_resultStandardScheme getScheme() {
                return new vUnderstand_resultStandardScheme();
            }
        }

        private static class vUnderstand_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<vUnderstand_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, vUnderstand_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<UContent>(_list0.size);
                                    UContent _elem1;
                                    for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                                    {
                                        _elem1 = new UContent();
                                        _elem1.read(iprot);
                                        struct.success.add(_elem1);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, vUnderstand_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (UContent _iter3 : struct.success)
                        {
                            _iter3.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class vUnderstand_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public vUnderstand_resultTupleScheme getScheme() {
                return new vUnderstand_resultTupleScheme();
            }
        }

        private static class vUnderstand_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<vUnderstand_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, vUnderstand_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (UContent _iter4 : struct.success)
                        {
                            _iter4.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, vUnderstand_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<UContent>(_list5.size);
                        UContent _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
                        {
                            _elem6 = new UContent();
                            _elem6.read(iprot);
                            struct.success.add(_elem6);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
