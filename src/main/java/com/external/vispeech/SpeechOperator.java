package com.external.vispeech;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-04-16")
public class SpeechOperator {

    public interface Iface {

        public java.lang.String asrSessionBegin(java.lang.String params, java.nio.ByteBuffer waveData) throws org.apache.thrift.TException;

        public int asrAudioWrite(java.lang.String sessionId, java.nio.ByteBuffer waveData) throws org.apache.thrift.TException;

        public java.lang.String asrGetResult(java.lang.String sessionId) throws org.apache.thrift.TException;

        public TRet ttsSessionBegin(java.lang.String text, java.lang.String params) throws org.apache.thrift.TException;

        public TRet ttsAudioGet(java.lang.String sessionId) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void asrSessionBegin(java.lang.String params, java.nio.ByteBuffer waveData, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void asrAudioWrite(java.lang.String sessionId, java.nio.ByteBuffer waveData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

        public void asrGetResult(java.lang.String sessionId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void ttsSessionBegin(java.lang.String text, java.lang.String params, org.apache.thrift.async.AsyncMethodCallback<TRet> resultHandler) throws org.apache.thrift.TException;

        public void ttsAudioGet(java.lang.String sessionId, org.apache.thrift.async.AsyncMethodCallback<TRet> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public java.lang.String asrSessionBegin(java.lang.String params, java.nio.ByteBuffer waveData) throws org.apache.thrift.TException
        {
            send_asrSessionBegin(params, waveData);
            return recv_asrSessionBegin();
        }

        public void send_asrSessionBegin(java.lang.String params, java.nio.ByteBuffer waveData) throws org.apache.thrift.TException
        {
            asrSessionBegin_args args = new asrSessionBegin_args();
            args.setParams(params);
            args.setWaveData(waveData);
            sendBase("asrSessionBegin", args);
        }

        public java.lang.String recv_asrSessionBegin() throws org.apache.thrift.TException
        {
            asrSessionBegin_result result = new asrSessionBegin_result();
            receiveBase(result, "asrSessionBegin");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "asrSessionBegin failed: unknown result");
        }

        public int asrAudioWrite(java.lang.String sessionId, java.nio.ByteBuffer waveData) throws org.apache.thrift.TException
        {
            send_asrAudioWrite(sessionId, waveData);
            return recv_asrAudioWrite();
        }

        public void send_asrAudioWrite(java.lang.String sessionId, java.nio.ByteBuffer waveData) throws org.apache.thrift.TException
        {
            asrAudioWrite_args args = new asrAudioWrite_args();
            args.setSessionId(sessionId);
            args.setWaveData(waveData);
            sendBase("asrAudioWrite", args);
        }

        public int recv_asrAudioWrite() throws org.apache.thrift.TException
        {
            asrAudioWrite_result result = new asrAudioWrite_result();
            receiveBase(result, "asrAudioWrite");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "asrAudioWrite failed: unknown result");
        }

        public java.lang.String asrGetResult(java.lang.String sessionId) throws org.apache.thrift.TException
        {
            send_asrGetResult(sessionId);
            return recv_asrGetResult();
        }

        public void send_asrGetResult(java.lang.String sessionId) throws org.apache.thrift.TException
        {
            asrGetResult_args args = new asrGetResult_args();
            args.setSessionId(sessionId);
            sendBase("asrGetResult", args);
        }

        public java.lang.String recv_asrGetResult() throws org.apache.thrift.TException
        {
            asrGetResult_result result = new asrGetResult_result();
            receiveBase(result, "asrGetResult");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "asrGetResult failed: unknown result");
        }

        public TRet ttsSessionBegin(java.lang.String text, java.lang.String params) throws org.apache.thrift.TException
        {
            send_ttsSessionBegin(text, params);
            return recv_ttsSessionBegin();
        }

        public void send_ttsSessionBegin(java.lang.String text, java.lang.String params) throws org.apache.thrift.TException
        {
            ttsSessionBegin_args args = new ttsSessionBegin_args();
            args.setText(text);
            args.setParams(params);
            sendBase("ttsSessionBegin", args);
        }

        public TRet recv_ttsSessionBegin() throws org.apache.thrift.TException
        {
            ttsSessionBegin_result result = new ttsSessionBegin_result();
            receiveBase(result, "ttsSessionBegin");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ttsSessionBegin failed: unknown result");
        }

        public TRet ttsAudioGet(java.lang.String sessionId) throws org.apache.thrift.TException
        {
            send_ttsAudioGet(sessionId);
            return recv_ttsAudioGet();
        }

        public void send_ttsAudioGet(java.lang.String sessionId) throws org.apache.thrift.TException
        {
            ttsAudioGet_args args = new ttsAudioGet_args();
            args.setSessionId(sessionId);
            sendBase("ttsAudioGet", args);
        }

        public TRet recv_ttsAudioGet() throws org.apache.thrift.TException
        {
            ttsAudioGet_result result = new ttsAudioGet_result();
            receiveBase(result, "ttsAudioGet");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ttsAudioGet failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void asrSessionBegin(java.lang.String params, java.nio.ByteBuffer waveData, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            asrSessionBegin_call method_call = new asrSessionBegin_call(params, waveData, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class asrSessionBegin_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private java.lang.String params;
            private java.nio.ByteBuffer waveData;
            public asrSessionBegin_call(java.lang.String params, java.nio.ByteBuffer waveData, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.params = params;
                this.waveData = waveData;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("asrSessionBegin", org.apache.thrift.protocol.TMessageType.CALL, 0));
                asrSessionBegin_args args = new asrSessionBegin_args();
                args.setParams(params);
                args.setWaveData(waveData);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_asrSessionBegin();
            }
        }

        public void asrAudioWrite(java.lang.String sessionId, java.nio.ByteBuffer waveData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            asrAudioWrite_call method_call = new asrAudioWrite_call(sessionId, waveData, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class asrAudioWrite_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
            private java.lang.String sessionId;
            private java.nio.ByteBuffer waveData;
            public asrAudioWrite_call(java.lang.String sessionId, java.nio.ByteBuffer waveData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.sessionId = sessionId;
                this.waveData = waveData;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("asrAudioWrite", org.apache.thrift.protocol.TMessageType.CALL, 0));
                asrAudioWrite_args args = new asrAudioWrite_args();
                args.setSessionId(sessionId);
                args.setWaveData(waveData);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Integer getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_asrAudioWrite();
            }
        }

        public void asrGetResult(java.lang.String sessionId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            asrGetResult_call method_call = new asrGetResult_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class asrGetResult_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private java.lang.String sessionId;
            public asrGetResult_call(java.lang.String sessionId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.sessionId = sessionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("asrGetResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
                asrGetResult_args args = new asrGetResult_args();
                args.setSessionId(sessionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_asrGetResult();
            }
        }

        public void ttsSessionBegin(java.lang.String text, java.lang.String params, org.apache.thrift.async.AsyncMethodCallback<TRet> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ttsSessionBegin_call method_call = new ttsSessionBegin_call(text, params, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class ttsSessionBegin_call extends org.apache.thrift.async.TAsyncMethodCall<TRet> {
            private java.lang.String text;
            private java.lang.String params;
            public ttsSessionBegin_call(java.lang.String text, java.lang.String params, org.apache.thrift.async.AsyncMethodCallback<TRet> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.text = text;
                this.params = params;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ttsSessionBegin", org.apache.thrift.protocol.TMessageType.CALL, 0));
                ttsSessionBegin_args args = new ttsSessionBegin_args();
                args.setText(text);
                args.setParams(params);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public TRet getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_ttsSessionBegin();
            }
        }

        public void ttsAudioGet(java.lang.String sessionId, org.apache.thrift.async.AsyncMethodCallback<TRet> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ttsAudioGet_call method_call = new ttsAudioGet_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class ttsAudioGet_call extends org.apache.thrift.async.TAsyncMethodCall<TRet> {
            private java.lang.String sessionId;
            public ttsAudioGet_call(java.lang.String sessionId, org.apache.thrift.async.AsyncMethodCallback<TRet> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.sessionId = sessionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ttsAudioGet", org.apache.thrift.protocol.TMessageType.CALL, 0));
                ttsAudioGet_args args = new ttsAudioGet_args();
                args.setSessionId(sessionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public TRet getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_ttsAudioGet();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger _LOGGER = LogManager.getLogger(Processor.class);
        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("asrSessionBegin", new asrSessionBegin());
            processMap.put("asrAudioWrite", new asrAudioWrite());
            processMap.put("asrGetResult", new asrGetResult());
            processMap.put("ttsSessionBegin", new ttsSessionBegin());
            processMap.put("ttsAudioGet", new ttsAudioGet());
            return processMap;
        }

        public static class asrSessionBegin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, asrSessionBegin_args> {
            public asrSessionBegin() {
                super("asrSessionBegin");
            }

            public asrSessionBegin_args getEmptyArgsInstance() {
                return new asrSessionBegin_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public asrSessionBegin_result getResult(I iface, asrSessionBegin_args args) throws org.apache.thrift.TException {
                asrSessionBegin_result result = new asrSessionBegin_result();
                result.success = iface.asrSessionBegin(args.params, args.waveData);
                return result;
            }
        }

        public static class asrAudioWrite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, asrAudioWrite_args> {
            public asrAudioWrite() {
                super("asrAudioWrite");
            }

            public asrAudioWrite_args getEmptyArgsInstance() {
                return new asrAudioWrite_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public asrAudioWrite_result getResult(I iface, asrAudioWrite_args args) throws org.apache.thrift.TException {
                asrAudioWrite_result result = new asrAudioWrite_result();
                result.success = iface.asrAudioWrite(args.sessionId, args.waveData);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class asrGetResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, asrGetResult_args> {
            public asrGetResult() {
                super("asrGetResult");
            }

            public asrGetResult_args getEmptyArgsInstance() {
                return new asrGetResult_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public asrGetResult_result getResult(I iface, asrGetResult_args args) throws org.apache.thrift.TException {
                asrGetResult_result result = new asrGetResult_result();
                result.success = iface.asrGetResult(args.sessionId);
                return result;
            }
        }

        public static class ttsSessionBegin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ttsSessionBegin_args> {
            public ttsSessionBegin() {
                super("ttsSessionBegin");
            }

            public ttsSessionBegin_args getEmptyArgsInstance() {
                return new ttsSessionBegin_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public ttsSessionBegin_result getResult(I iface, ttsSessionBegin_args args) throws org.apache.thrift.TException {
                ttsSessionBegin_result result = new ttsSessionBegin_result();
                result.success = iface.ttsSessionBegin(args.text, args.params);
                return result;
            }
        }

        public static class ttsAudioGet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ttsAudioGet_args> {
            public ttsAudioGet() {
                super("ttsAudioGet");
            }

            public ttsAudioGet_args getEmptyArgsInstance() {
                return new ttsAudioGet_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public ttsAudioGet_result getResult(I iface, ttsAudioGet_args args) throws org.apache.thrift.TException {
                ttsAudioGet_result result = new ttsAudioGet_result();
                result.success = iface.ttsAudioGet(args.sessionId);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger _LOGGER = LogManager.getLogger(AsyncProcessor.class);
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("asrSessionBegin", new asrSessionBegin());
            processMap.put("asrAudioWrite", new asrAudioWrite());
            processMap.put("asrGetResult", new asrGetResult());
            processMap.put("ttsSessionBegin", new ttsSessionBegin());
            processMap.put("ttsAudioGet", new ttsAudioGet());
            return processMap;
        }

        public static class asrSessionBegin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, asrSessionBegin_args, java.lang.String> {
            public asrSessionBegin() {
                super("asrSessionBegin");
            }

            public asrSessionBegin_args getEmptyArgsInstance() {
                return new asrSessionBegin_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        asrSessionBegin_result result = new asrSessionBegin_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        asrSessionBegin_result result = new asrSessionBegin_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, asrSessionBegin_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.asrSessionBegin(args.params, args.waveData,resultHandler);
            }
        }

        public static class asrAudioWrite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, asrAudioWrite_args, java.lang.Integer> {
            public asrAudioWrite() {
                super("asrAudioWrite");
            }

            public asrAudioWrite_args getEmptyArgsInstance() {
                return new asrAudioWrite_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
                    public void onComplete(java.lang.Integer o) {
                        asrAudioWrite_result result = new asrAudioWrite_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        asrAudioWrite_result result = new asrAudioWrite_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, asrAudioWrite_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
                iface.asrAudioWrite(args.sessionId, args.waveData,resultHandler);
            }
        }

        public static class asrGetResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, asrGetResult_args, java.lang.String> {
            public asrGetResult() {
                super("asrGetResult");
            }

            public asrGetResult_args getEmptyArgsInstance() {
                return new asrGetResult_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        asrGetResult_result result = new asrGetResult_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        asrGetResult_result result = new asrGetResult_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, asrGetResult_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.asrGetResult(args.sessionId,resultHandler);
            }
        }

        public static class ttsSessionBegin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ttsSessionBegin_args, TRet> {
            public ttsSessionBegin() {
                super("ttsSessionBegin");
            }

            public ttsSessionBegin_args getEmptyArgsInstance() {
                return new ttsSessionBegin_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<TRet> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<TRet>() {
                    public void onComplete(TRet o) {
                        ttsSessionBegin_result result = new ttsSessionBegin_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        ttsSessionBegin_result result = new ttsSessionBegin_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, ttsSessionBegin_args args, org.apache.thrift.async.AsyncMethodCallback<TRet> resultHandler) throws org.apache.thrift.TException {
                iface.ttsSessionBegin(args.text, args.params,resultHandler);
            }
        }

        public static class ttsAudioGet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ttsAudioGet_args, TRet> {
            public ttsAudioGet() {
                super("ttsAudioGet");
            }

            public ttsAudioGet_args getEmptyArgsInstance() {
                return new ttsAudioGet_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<TRet> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<TRet>() {
                    public void onComplete(TRet o) {
                        ttsAudioGet_result result = new ttsAudioGet_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        ttsAudioGet_result result = new ttsAudioGet_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, ttsAudioGet_args args, org.apache.thrift.async.AsyncMethodCallback<TRet> resultHandler) throws org.apache.thrift.TException {
                iface.ttsAudioGet(args.sessionId,resultHandler);
            }
        }

    }

    public static class asrSessionBegin_args implements org.apache.thrift.TBase<asrSessionBegin_args, asrSessionBegin_args._Fields>, java.io.Serializable, Cloneable, Comparable<asrSessionBegin_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asrSessionBegin_args");

        private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField WAVE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("waveData", org.apache.thrift.protocol.TType.STRING, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new asrSessionBegin_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new asrSessionBegin_argsTupleSchemeFactory();

        public java.lang.String params; // required
        public java.nio.ByteBuffer waveData; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAMS((short)1, "params"),
            WAVE_DATA((short)2, "waveData");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAMS
                        return PARAMS;
                    case 2: // WAVE_DATA
                        return WAVE_DATA;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.WAVE_DATA, new org.apache.thrift.meta_data.FieldMetaData("waveData", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asrSessionBegin_args.class, metaDataMap);
        }

        public asrSessionBegin_args() {
        }

        public asrSessionBegin_args(
                java.lang.String params,
                java.nio.ByteBuffer waveData)
        {
            this();
            this.params = params;
            this.waveData = org.apache.thrift.TBaseHelper.copyBinary(waveData);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public asrSessionBegin_args(asrSessionBegin_args other) {
            if (other.isSetParams()) {
                this.params = other.params;
            }
            if (other.isSetWaveData()) {
                this.waveData = org.apache.thrift.TBaseHelper.copyBinary(other.waveData);
            }
        }

        public asrSessionBegin_args deepCopy() {
            return new asrSessionBegin_args(this);
        }

        @Override
        public void clear() {
            this.params = null;
            this.waveData = null;
        }

        public java.lang.String getParams() {
            return this.params;
        }

        public asrSessionBegin_args setParams(java.lang.String params) {
            this.params = params;
            return this;
        }

        public void unsetParams() {
            this.params = null;
        }

        /** Returns true if field params is set (has been assigned a value) and false otherwise */
        public boolean isSetParams() {
            return this.params != null;
        }

        public void setParamsIsSet(boolean value) {
            if (!value) {
                this.params = null;
            }
        }

        public byte[] getWaveData() {
            setWaveData(org.apache.thrift.TBaseHelper.rightSize(waveData));
            return waveData == null ? null : waveData.array();
        }

        public java.nio.ByteBuffer bufferForWaveData() {
            return org.apache.thrift.TBaseHelper.copyBinary(waveData);
        }

        public asrSessionBegin_args setWaveData(byte[] waveData) {
            this.waveData = waveData == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(waveData.clone());
            return this;
        }

        public asrSessionBegin_args setWaveData(java.nio.ByteBuffer waveData) {
            this.waveData = org.apache.thrift.TBaseHelper.copyBinary(waveData);
            return this;
        }

        public void unsetWaveData() {
            this.waveData = null;
        }

        /** Returns true if field waveData is set (has been assigned a value) and false otherwise */
        public boolean isSetWaveData() {
            return this.waveData != null;
        }

        public void setWaveDataIsSet(boolean value) {
            if (!value) {
                this.waveData = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PARAMS:
                    if (value == null) {
                        unsetParams();
                    } else {
                        setParams((java.lang.String)value);
                    }
                    break;

                case WAVE_DATA:
                    if (value == null) {
                        unsetWaveData();
                    } else {
                        if (value instanceof byte[]) {
                            setWaveData((byte[])value);
                        } else {
                            setWaveData((java.nio.ByteBuffer)value);
                        }
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAMS:
                    return getParams();

                case WAVE_DATA:
                    return getWaveData();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PARAMS:
                    return isSetParams();
                case WAVE_DATA:
                    return isSetWaveData();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof asrSessionBegin_args)
                return this.equals((asrSessionBegin_args)that);
            return false;
        }

        public boolean equals(asrSessionBegin_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_params = true && this.isSetParams();
            boolean that_present_params = true && that.isSetParams();
            if (this_present_params || that_present_params) {
                if (!(this_present_params && that_present_params))
                    return false;
                if (!this.params.equals(that.params))
                    return false;
            }

            boolean this_present_waveData = true && this.isSetWaveData();
            boolean that_present_waveData = true && that.isSetWaveData();
            if (this_present_waveData || that_present_waveData) {
                if (!(this_present_waveData && that_present_waveData))
                    return false;
                if (!this.waveData.equals(that.waveData))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
            if (isSetParams())
                hashCode = hashCode * 8191 + params.hashCode();

            hashCode = hashCode * 8191 + ((isSetWaveData()) ? 131071 : 524287);
            if (isSetWaveData())
                hashCode = hashCode * 8191 + waveData.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(asrSessionBegin_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParams()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetWaveData()).compareTo(other.isSetWaveData());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetWaveData()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waveData, other.waveData);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("asrSessionBegin_args(");
            boolean first = true;

            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("waveData:");
            if (this.waveData == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.waveData, sb);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class asrSessionBegin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asrSessionBegin_argsStandardScheme getScheme() {
                return new asrSessionBegin_argsStandardScheme();
            }
        }

        private static class asrSessionBegin_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<asrSessionBegin_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, asrSessionBegin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.params = iprot.readString();
                                struct.setParamsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // WAVE_DATA
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.waveData = iprot.readBinary();
                                struct.setWaveDataIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, asrSessionBegin_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.params != null) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    oprot.writeString(struct.params);
                    oprot.writeFieldEnd();
                }
                if (struct.waveData != null) {
                    oprot.writeFieldBegin(WAVE_DATA_FIELD_DESC);
                    oprot.writeBinary(struct.waveData);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class asrSessionBegin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asrSessionBegin_argsTupleScheme getScheme() {
                return new asrSessionBegin_argsTupleScheme();
            }
        }

        private static class asrSessionBegin_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<asrSessionBegin_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, asrSessionBegin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetParams()) {
                    optionals.set(0);
                }
                if (struct.isSetWaveData()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetParams()) {
                    oprot.writeString(struct.params);
                }
                if (struct.isSetWaveData()) {
                    oprot.writeBinary(struct.waveData);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, asrSessionBegin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.params = iprot.readString();
                    struct.setParamsIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.waveData = iprot.readBinary();
                    struct.setWaveDataIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class asrSessionBegin_result implements org.apache.thrift.TBase<asrSessionBegin_result, asrSessionBegin_result._Fields>, java.io.Serializable, Cloneable, Comparable<asrSessionBegin_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asrSessionBegin_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new asrSessionBegin_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new asrSessionBegin_resultTupleSchemeFactory();

        public java.lang.String success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asrSessionBegin_result.class, metaDataMap);
        }

        public asrSessionBegin_result() {
        }

        public asrSessionBegin_result(
                java.lang.String success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public asrSessionBegin_result(asrSessionBegin_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public asrSessionBegin_result deepCopy() {
            return new asrSessionBegin_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public java.lang.String getSuccess() {
            return this.success;
        }

        public asrSessionBegin_result setSuccess(java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof asrSessionBegin_result)
                return this.equals((asrSessionBegin_result)that);
            return false;
        }

        public boolean equals(asrSessionBegin_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(asrSessionBegin_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("asrSessionBegin_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class asrSessionBegin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asrSessionBegin_resultStandardScheme getScheme() {
                return new asrSessionBegin_resultStandardScheme();
            }
        }

        private static class asrSessionBegin_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<asrSessionBegin_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, asrSessionBegin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, asrSessionBegin_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class asrSessionBegin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asrSessionBegin_resultTupleScheme getScheme() {
                return new asrSessionBegin_resultTupleScheme();
            }
        }

        private static class asrSessionBegin_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<asrSessionBegin_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, asrSessionBegin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, asrSessionBegin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class asrAudioWrite_args implements org.apache.thrift.TBase<asrAudioWrite_args, asrAudioWrite_args._Fields>, java.io.Serializable, Cloneable, Comparable<asrAudioWrite_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asrAudioWrite_args");

        private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField WAVE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("waveData", org.apache.thrift.protocol.TType.STRING, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new asrAudioWrite_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new asrAudioWrite_argsTupleSchemeFactory();

        public java.lang.String sessionId; // required
        public java.nio.ByteBuffer waveData; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SESSION_ID((short)1, "sessionId"),
            WAVE_DATA((short)2, "waveData");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // SESSION_ID
                        return SESSION_ID;
                    case 2: // WAVE_DATA
                        return WAVE_DATA;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.WAVE_DATA, new org.apache.thrift.meta_data.FieldMetaData("waveData", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asrAudioWrite_args.class, metaDataMap);
        }

        public asrAudioWrite_args() {
        }

        public asrAudioWrite_args(
                java.lang.String sessionId,
                java.nio.ByteBuffer waveData)
        {
            this();
            this.sessionId = sessionId;
            this.waveData = org.apache.thrift.TBaseHelper.copyBinary(waveData);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public asrAudioWrite_args(asrAudioWrite_args other) {
            if (other.isSetSessionId()) {
                this.sessionId = other.sessionId;
            }
            if (other.isSetWaveData()) {
                this.waveData = org.apache.thrift.TBaseHelper.copyBinary(other.waveData);
            }
        }

        public asrAudioWrite_args deepCopy() {
            return new asrAudioWrite_args(this);
        }

        @Override
        public void clear() {
            this.sessionId = null;
            this.waveData = null;
        }

        public java.lang.String getSessionId() {
            return this.sessionId;
        }

        public asrAudioWrite_args setSessionId(java.lang.String sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        public void unsetSessionId() {
            this.sessionId = null;
        }

        /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
        public boolean isSetSessionId() {
            return this.sessionId != null;
        }

        public void setSessionIdIsSet(boolean value) {
            if (!value) {
                this.sessionId = null;
            }
        }

        public byte[] getWaveData() {
            setWaveData(org.apache.thrift.TBaseHelper.rightSize(waveData));
            return waveData == null ? null : waveData.array();
        }

        public java.nio.ByteBuffer bufferForWaveData() {
            return org.apache.thrift.TBaseHelper.copyBinary(waveData);
        }

        public asrAudioWrite_args setWaveData(byte[] waveData) {
            this.waveData = waveData == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(waveData.clone());
            return this;
        }

        public asrAudioWrite_args setWaveData(java.nio.ByteBuffer waveData) {
            this.waveData = org.apache.thrift.TBaseHelper.copyBinary(waveData);
            return this;
        }

        public void unsetWaveData() {
            this.waveData = null;
        }

        /** Returns true if field waveData is set (has been assigned a value) and false otherwise */
        public boolean isSetWaveData() {
            return this.waveData != null;
        }

        public void setWaveDataIsSet(boolean value) {
            if (!value) {
                this.waveData = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SESSION_ID:
                    if (value == null) {
                        unsetSessionId();
                    } else {
                        setSessionId((java.lang.String)value);
                    }
                    break;

                case WAVE_DATA:
                    if (value == null) {
                        unsetWaveData();
                    } else {
                        if (value instanceof byte[]) {
                            setWaveData((byte[])value);
                        } else {
                            setWaveData((java.nio.ByteBuffer)value);
                        }
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SESSION_ID:
                    return getSessionId();

                case WAVE_DATA:
                    return getWaveData();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SESSION_ID:
                    return isSetSessionId();
                case WAVE_DATA:
                    return isSetWaveData();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof asrAudioWrite_args)
                return this.equals((asrAudioWrite_args)that);
            return false;
        }

        public boolean equals(asrAudioWrite_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_sessionId = true && this.isSetSessionId();
            boolean that_present_sessionId = true && that.isSetSessionId();
            if (this_present_sessionId || that_present_sessionId) {
                if (!(this_present_sessionId && that_present_sessionId))
                    return false;
                if (!this.sessionId.equals(that.sessionId))
                    return false;
            }

            boolean this_present_waveData = true && this.isSetWaveData();
            boolean that_present_waveData = true && that.isSetWaveData();
            if (this_present_waveData || that_present_waveData) {
                if (!(this_present_waveData && that_present_waveData))
                    return false;
                if (!this.waveData.equals(that.waveData))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSessionId()) ? 131071 : 524287);
            if (isSetSessionId())
                hashCode = hashCode * 8191 + sessionId.hashCode();

            hashCode = hashCode * 8191 + ((isSetWaveData()) ? 131071 : 524287);
            if (isSetWaveData())
                hashCode = hashCode * 8191 + waveData.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(asrAudioWrite_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSessionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetWaveData()).compareTo(other.isSetWaveData());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetWaveData()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waveData, other.waveData);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("asrAudioWrite_args(");
            boolean first = true;

            sb.append("sessionId:");
            if (this.sessionId == null) {
                sb.append("null");
            } else {
                sb.append(this.sessionId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("waveData:");
            if (this.waveData == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.waveData, sb);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class asrAudioWrite_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asrAudioWrite_argsStandardScheme getScheme() {
                return new asrAudioWrite_argsStandardScheme();
            }
        }

        private static class asrAudioWrite_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<asrAudioWrite_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, asrAudioWrite_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SESSION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.sessionId = iprot.readString();
                                struct.setSessionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // WAVE_DATA
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.waveData = iprot.readBinary();
                                struct.setWaveDataIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, asrAudioWrite_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.sessionId != null) {
                    oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
                    oprot.writeString(struct.sessionId);
                    oprot.writeFieldEnd();
                }
                if (struct.waveData != null) {
                    oprot.writeFieldBegin(WAVE_DATA_FIELD_DESC);
                    oprot.writeBinary(struct.waveData);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class asrAudioWrite_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asrAudioWrite_argsTupleScheme getScheme() {
                return new asrAudioWrite_argsTupleScheme();
            }
        }

        private static class asrAudioWrite_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<asrAudioWrite_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, asrAudioWrite_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSessionId()) {
                    optionals.set(0);
                }
                if (struct.isSetWaveData()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSessionId()) {
                    oprot.writeString(struct.sessionId);
                }
                if (struct.isSetWaveData()) {
                    oprot.writeBinary(struct.waveData);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, asrAudioWrite_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.sessionId = iprot.readString();
                    struct.setSessionIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.waveData = iprot.readBinary();
                    struct.setWaveDataIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class asrAudioWrite_result implements org.apache.thrift.TBase<asrAudioWrite_result, asrAudioWrite_result._Fields>, java.io.Serializable, Cloneable, Comparable<asrAudioWrite_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asrAudioWrite_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new asrAudioWrite_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new asrAudioWrite_resultTupleSchemeFactory();

        public int success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asrAudioWrite_result.class, metaDataMap);
        }

        public asrAudioWrite_result() {
        }

        public asrAudioWrite_result(
                int success)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public asrAudioWrite_result(asrAudioWrite_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public asrAudioWrite_result deepCopy() {
            return new asrAudioWrite_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public asrAudioWrite_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof asrAudioWrite_result)
                return this.equals((asrAudioWrite_result)that);
            return false;
        }

        public boolean equals(asrAudioWrite_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + success;

            return hashCode;
        }

        @Override
        public int compareTo(asrAudioWrite_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("asrAudioWrite_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class asrAudioWrite_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asrAudioWrite_resultStandardScheme getScheme() {
                return new asrAudioWrite_resultStandardScheme();
            }
        }

        private static class asrAudioWrite_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<asrAudioWrite_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, asrAudioWrite_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, asrAudioWrite_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class asrAudioWrite_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asrAudioWrite_resultTupleScheme getScheme() {
                return new asrAudioWrite_resultTupleScheme();
            }
        }

        private static class asrAudioWrite_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<asrAudioWrite_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, asrAudioWrite_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, asrAudioWrite_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class asrGetResult_args implements org.apache.thrift.TBase<asrGetResult_args, asrGetResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<asrGetResult_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asrGetResult_args");

        private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new asrGetResult_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new asrGetResult_argsTupleSchemeFactory();

        public java.lang.String sessionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SESSION_ID((short)1, "sessionId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // SESSION_ID
                        return SESSION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asrGetResult_args.class, metaDataMap);
        }

        public asrGetResult_args() {
        }

        public asrGetResult_args(
                java.lang.String sessionId)
        {
            this();
            this.sessionId = sessionId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public asrGetResult_args(asrGetResult_args other) {
            if (other.isSetSessionId()) {
                this.sessionId = other.sessionId;
            }
        }

        public asrGetResult_args deepCopy() {
            return new asrGetResult_args(this);
        }

        @Override
        public void clear() {
            this.sessionId = null;
        }

        public java.lang.String getSessionId() {
            return this.sessionId;
        }

        public asrGetResult_args setSessionId(java.lang.String sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        public void unsetSessionId() {
            this.sessionId = null;
        }

        /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
        public boolean isSetSessionId() {
            return this.sessionId != null;
        }

        public void setSessionIdIsSet(boolean value) {
            if (!value) {
                this.sessionId = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SESSION_ID:
                    if (value == null) {
                        unsetSessionId();
                    } else {
                        setSessionId((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SESSION_ID:
                    return getSessionId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SESSION_ID:
                    return isSetSessionId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof asrGetResult_args)
                return this.equals((asrGetResult_args)that);
            return false;
        }

        public boolean equals(asrGetResult_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_sessionId = true && this.isSetSessionId();
            boolean that_present_sessionId = true && that.isSetSessionId();
            if (this_present_sessionId || that_present_sessionId) {
                if (!(this_present_sessionId && that_present_sessionId))
                    return false;
                if (!this.sessionId.equals(that.sessionId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSessionId()) ? 131071 : 524287);
            if (isSetSessionId())
                hashCode = hashCode * 8191 + sessionId.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(asrGetResult_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSessionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("asrGetResult_args(");
            boolean first = true;

            sb.append("sessionId:");
            if (this.sessionId == null) {
                sb.append("null");
            } else {
                sb.append(this.sessionId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class asrGetResult_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asrGetResult_argsStandardScheme getScheme() {
                return new asrGetResult_argsStandardScheme();
            }
        }

        private static class asrGetResult_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<asrGetResult_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, asrGetResult_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SESSION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.sessionId = iprot.readString();
                                struct.setSessionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, asrGetResult_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.sessionId != null) {
                    oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
                    oprot.writeString(struct.sessionId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class asrGetResult_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asrGetResult_argsTupleScheme getScheme() {
                return new asrGetResult_argsTupleScheme();
            }
        }

        private static class asrGetResult_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<asrGetResult_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, asrGetResult_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSessionId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSessionId()) {
                    oprot.writeString(struct.sessionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, asrGetResult_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.sessionId = iprot.readString();
                    struct.setSessionIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class asrGetResult_result implements org.apache.thrift.TBase<asrGetResult_result, asrGetResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<asrGetResult_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asrGetResult_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new asrGetResult_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new asrGetResult_resultTupleSchemeFactory();

        public java.lang.String success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asrGetResult_result.class, metaDataMap);
        }

        public asrGetResult_result() {
        }

        public asrGetResult_result(
                java.lang.String success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public asrGetResult_result(asrGetResult_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public asrGetResult_result deepCopy() {
            return new asrGetResult_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public java.lang.String getSuccess() {
            return this.success;
        }

        public asrGetResult_result setSuccess(java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof asrGetResult_result)
                return this.equals((asrGetResult_result)that);
            return false;
        }

        public boolean equals(asrGetResult_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(asrGetResult_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("asrGetResult_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class asrGetResult_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asrGetResult_resultStandardScheme getScheme() {
                return new asrGetResult_resultStandardScheme();
            }
        }

        private static class asrGetResult_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<asrGetResult_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, asrGetResult_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, asrGetResult_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class asrGetResult_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asrGetResult_resultTupleScheme getScheme() {
                return new asrGetResult_resultTupleScheme();
            }
        }

        private static class asrGetResult_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<asrGetResult_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, asrGetResult_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, asrGetResult_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class ttsSessionBegin_args implements org.apache.thrift.TBase<ttsSessionBegin_args, ttsSessionBegin_args._Fields>, java.io.Serializable, Cloneable, Comparable<ttsSessionBegin_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ttsSessionBegin_args");

        private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ttsSessionBegin_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ttsSessionBegin_argsTupleSchemeFactory();

        public java.lang.String text; // required
        public java.lang.String params; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            TEXT((short)1, "text"),
            PARAMS((short)2, "params");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // TEXT
                        return TEXT;
                    case 2: // PARAMS
                        return PARAMS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ttsSessionBegin_args.class, metaDataMap);
        }

        public ttsSessionBegin_args() {
        }

        public ttsSessionBegin_args(
                java.lang.String text,
                java.lang.String params)
        {
            this();
            this.text = text;
            this.params = params;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ttsSessionBegin_args(ttsSessionBegin_args other) {
            if (other.isSetText()) {
                this.text = other.text;
            }
            if (other.isSetParams()) {
                this.params = other.params;
            }
        }

        public ttsSessionBegin_args deepCopy() {
            return new ttsSessionBegin_args(this);
        }

        @Override
        public void clear() {
            this.text = null;
            this.params = null;
        }

        public java.lang.String getText() {
            return this.text;
        }

        public ttsSessionBegin_args setText(java.lang.String text) {
            this.text = text;
            return this;
        }

        public void unsetText() {
            this.text = null;
        }

        /** Returns true if field text is set (has been assigned a value) and false otherwise */
        public boolean isSetText() {
            return this.text != null;
        }

        public void setTextIsSet(boolean value) {
            if (!value) {
                this.text = null;
            }
        }

        public java.lang.String getParams() {
            return this.params;
        }

        public ttsSessionBegin_args setParams(java.lang.String params) {
            this.params = params;
            return this;
        }

        public void unsetParams() {
            this.params = null;
        }

        /** Returns true if field params is set (has been assigned a value) and false otherwise */
        public boolean isSetParams() {
            return this.params != null;
        }

        public void setParamsIsSet(boolean value) {
            if (!value) {
                this.params = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case TEXT:
                    if (value == null) {
                        unsetText();
                    } else {
                        setText((java.lang.String)value);
                    }
                    break;

                case PARAMS:
                    if (value == null) {
                        unsetParams();
                    } else {
                        setParams((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case TEXT:
                    return getText();

                case PARAMS:
                    return getParams();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case TEXT:
                    return isSetText();
                case PARAMS:
                    return isSetParams();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ttsSessionBegin_args)
                return this.equals((ttsSessionBegin_args)that);
            return false;
        }

        public boolean equals(ttsSessionBegin_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_text = true && this.isSetText();
            boolean that_present_text = true && that.isSetText();
            if (this_present_text || that_present_text) {
                if (!(this_present_text && that_present_text))
                    return false;
                if (!this.text.equals(that.text))
                    return false;
            }

            boolean this_present_params = true && this.isSetParams();
            boolean that_present_params = true && that.isSetParams();
            if (this_present_params || that_present_params) {
                if (!(this_present_params && that_present_params))
                    return false;
                if (!this.params.equals(that.params))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
            if (isSetText())
                hashCode = hashCode * 8191 + text.hashCode();

            hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
            if (isSetParams())
                hashCode = hashCode * 8191 + params.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ttsSessionBegin_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetText()).compareTo(other.isSetText());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetText()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParams()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ttsSessionBegin_args(");
            boolean first = true;

            sb.append("text:");
            if (this.text == null) {
                sb.append("null");
            } else {
                sb.append(this.text);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ttsSessionBegin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ttsSessionBegin_argsStandardScheme getScheme() {
                return new ttsSessionBegin_argsStandardScheme();
            }
        }

        private static class ttsSessionBegin_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ttsSessionBegin_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ttsSessionBegin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // TEXT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.text = iprot.readString();
                                struct.setTextIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.params = iprot.readString();
                                struct.setParamsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ttsSessionBegin_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.text != null) {
                    oprot.writeFieldBegin(TEXT_FIELD_DESC);
                    oprot.writeString(struct.text);
                    oprot.writeFieldEnd();
                }
                if (struct.params != null) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    oprot.writeString(struct.params);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ttsSessionBegin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ttsSessionBegin_argsTupleScheme getScheme() {
                return new ttsSessionBegin_argsTupleScheme();
            }
        }

        private static class ttsSessionBegin_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ttsSessionBegin_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ttsSessionBegin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetText()) {
                    optionals.set(0);
                }
                if (struct.isSetParams()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetText()) {
                    oprot.writeString(struct.text);
                }
                if (struct.isSetParams()) {
                    oprot.writeString(struct.params);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ttsSessionBegin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.text = iprot.readString();
                    struct.setTextIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.params = iprot.readString();
                    struct.setParamsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class ttsSessionBegin_result implements org.apache.thrift.TBase<ttsSessionBegin_result, ttsSessionBegin_result._Fields>, java.io.Serializable, Cloneable, Comparable<ttsSessionBegin_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ttsSessionBegin_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ttsSessionBegin_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ttsSessionBegin_resultTupleSchemeFactory();

        public TRet success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRet.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ttsSessionBegin_result.class, metaDataMap);
        }

        public ttsSessionBegin_result() {
        }

        public ttsSessionBegin_result(
                TRet success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ttsSessionBegin_result(ttsSessionBegin_result other) {
            if (other.isSetSuccess()) {
                this.success = new TRet(other.success);
            }
        }

        public ttsSessionBegin_result deepCopy() {
            return new ttsSessionBegin_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public TRet getSuccess() {
            return this.success;
        }

        public ttsSessionBegin_result setSuccess(TRet success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((TRet)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ttsSessionBegin_result)
                return this.equals((ttsSessionBegin_result)that);
            return false;
        }

        public boolean equals(ttsSessionBegin_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ttsSessionBegin_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ttsSessionBegin_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ttsSessionBegin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ttsSessionBegin_resultStandardScheme getScheme() {
                return new ttsSessionBegin_resultStandardScheme();
            }
        }

        private static class ttsSessionBegin_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ttsSessionBegin_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ttsSessionBegin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new TRet();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ttsSessionBegin_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ttsSessionBegin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ttsSessionBegin_resultTupleScheme getScheme() {
                return new ttsSessionBegin_resultTupleScheme();
            }
        }

        private static class ttsSessionBegin_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ttsSessionBegin_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ttsSessionBegin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ttsSessionBegin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new TRet();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class ttsAudioGet_args implements org.apache.thrift.TBase<ttsAudioGet_args, ttsAudioGet_args._Fields>, java.io.Serializable, Cloneable, Comparable<ttsAudioGet_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ttsAudioGet_args");

        private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ttsAudioGet_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ttsAudioGet_argsTupleSchemeFactory();

        public java.lang.String sessionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SESSION_ID((short)1, "sessionId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // SESSION_ID
                        return SESSION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ttsAudioGet_args.class, metaDataMap);
        }

        public ttsAudioGet_args() {
        }

        public ttsAudioGet_args(
                java.lang.String sessionId)
        {
            this();
            this.sessionId = sessionId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ttsAudioGet_args(ttsAudioGet_args other) {
            if (other.isSetSessionId()) {
                this.sessionId = other.sessionId;
            }
        }

        public ttsAudioGet_args deepCopy() {
            return new ttsAudioGet_args(this);
        }

        @Override
        public void clear() {
            this.sessionId = null;
        }

        public java.lang.String getSessionId() {
            return this.sessionId;
        }

        public ttsAudioGet_args setSessionId(java.lang.String sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        public void unsetSessionId() {
            this.sessionId = null;
        }

        /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
        public boolean isSetSessionId() {
            return this.sessionId != null;
        }

        public void setSessionIdIsSet(boolean value) {
            if (!value) {
                this.sessionId = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SESSION_ID:
                    if (value == null) {
                        unsetSessionId();
                    } else {
                        setSessionId((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SESSION_ID:
                    return getSessionId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SESSION_ID:
                    return isSetSessionId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ttsAudioGet_args)
                return this.equals((ttsAudioGet_args)that);
            return false;
        }

        public boolean equals(ttsAudioGet_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_sessionId = true && this.isSetSessionId();
            boolean that_present_sessionId = true && that.isSetSessionId();
            if (this_present_sessionId || that_present_sessionId) {
                if (!(this_present_sessionId && that_present_sessionId))
                    return false;
                if (!this.sessionId.equals(that.sessionId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSessionId()) ? 131071 : 524287);
            if (isSetSessionId())
                hashCode = hashCode * 8191 + sessionId.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ttsAudioGet_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSessionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ttsAudioGet_args(");
            boolean first = true;

            sb.append("sessionId:");
            if (this.sessionId == null) {
                sb.append("null");
            } else {
                sb.append(this.sessionId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ttsAudioGet_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ttsAudioGet_argsStandardScheme getScheme() {
                return new ttsAudioGet_argsStandardScheme();
            }
        }

        private static class ttsAudioGet_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ttsAudioGet_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ttsAudioGet_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SESSION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.sessionId = iprot.readString();
                                struct.setSessionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ttsAudioGet_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.sessionId != null) {
                    oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
                    oprot.writeString(struct.sessionId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ttsAudioGet_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ttsAudioGet_argsTupleScheme getScheme() {
                return new ttsAudioGet_argsTupleScheme();
            }
        }

        private static class ttsAudioGet_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ttsAudioGet_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ttsAudioGet_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSessionId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSessionId()) {
                    oprot.writeString(struct.sessionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ttsAudioGet_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.sessionId = iprot.readString();
                    struct.setSessionIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class ttsAudioGet_result implements org.apache.thrift.TBase<ttsAudioGet_result, ttsAudioGet_result._Fields>, java.io.Serializable, Cloneable, Comparable<ttsAudioGet_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ttsAudioGet_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ttsAudioGet_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ttsAudioGet_resultTupleSchemeFactory();

        public TRet success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRet.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ttsAudioGet_result.class, metaDataMap);
        }

        public ttsAudioGet_result() {
        }

        public ttsAudioGet_result(
                TRet success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ttsAudioGet_result(ttsAudioGet_result other) {
            if (other.isSetSuccess()) {
                this.success = new TRet(other.success);
            }
        }

        public ttsAudioGet_result deepCopy() {
            return new ttsAudioGet_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public TRet getSuccess() {
            return this.success;
        }

        public ttsAudioGet_result setSuccess(TRet success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((TRet)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ttsAudioGet_result)
                return this.equals((ttsAudioGet_result)that);
            return false;
        }

        public boolean equals(ttsAudioGet_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ttsAudioGet_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ttsAudioGet_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ttsAudioGet_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ttsAudioGet_resultStandardScheme getScheme() {
                return new ttsAudioGet_resultStandardScheme();
            }
        }

        private static class ttsAudioGet_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ttsAudioGet_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ttsAudioGet_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new TRet();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ttsAudioGet_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ttsAudioGet_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ttsAudioGet_resultTupleScheme getScheme() {
                return new ttsAudioGet_resultTupleScheme();
            }
        }

        private static class ttsAudioGet_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ttsAudioGet_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ttsAudioGet_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ttsAudioGet_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new TRet();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
