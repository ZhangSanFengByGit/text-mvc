package com.external.vispeech;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-04-16")
public class TRet implements org.apache.thrift.TBase<TRet, TRet._Fields>, java.io.Serializable, Cloneable, Comparable<TRet> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRet");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRetStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRetTupleSchemeFactory();

    public java.lang.String sessionId; // required
    public int state; // required
    public java.nio.ByteBuffer data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        SESSION_ID((short)1, "sessionId"),
        STATE((short)2, "state"),
        DATA((short)3, "data");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // SESSION_ID
                    return SESSION_ID;
                case 2: // STATE
                    return STATE;
                case 3: // DATA
                    return DATA;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRet.class, metaDataMap);
    }

    public TRet() {
    }

    public TRet(
            java.lang.String sessionId,
            int state,
            java.nio.ByteBuffer data)
    {
        this();
        this.sessionId = sessionId;
        this.state = state;
        setStateIsSet(true);
        this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TRet(TRet other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetSessionId()) {
            this.sessionId = other.sessionId;
        }
        this.state = other.state;
        if (other.isSetData()) {
            this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
        }
    }

    public TRet deepCopy() {
        return new TRet(this);
    }

    @Override
    public void clear() {
        this.sessionId = null;
        setStateIsSet(false);
        this.state = 0;
        this.data = null;
    }

    public java.lang.String getSessionId() {
        return this.sessionId;
    }

    public TRet setSessionId(java.lang.String sessionId) {
        this.sessionId = sessionId;
        return this;
    }

    public void unsetSessionId() {
        this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
        return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
        if (!value) {
            this.sessionId = null;
        }
    }

    public int getState() {
        return this.state;
    }

    public TRet setState(int state) {
        this.state = state;
        setStateIsSet(true);
        return this;
    }

    public void unsetState() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public byte[] getData() {
        setData(org.apache.thrift.TBaseHelper.rightSize(data));
        return data == null ? null : data.array();
    }

    public java.nio.ByteBuffer bufferForData() {
        return org.apache.thrift.TBaseHelper.copyBinary(data);
    }

    public TRet setData(byte[] data) {
        this.data = data == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(data.clone());
        return this;
    }

    public TRet setData(java.nio.ByteBuffer data) {
        this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
        return this;
    }

    public void unsetData() {
        this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
        return this.data != null;
    }

    public void setDataIsSet(boolean value) {
        if (!value) {
            this.data = null;
        }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
        switch (field) {
            case SESSION_ID:
                if (value == null) {
                    unsetSessionId();
                } else {
                    setSessionId((java.lang.String)value);
                }
                break;

            case STATE:
                if (value == null) {
                    unsetState();
                } else {
                    setState((java.lang.Integer)value);
                }
                break;

            case DATA:
                if (value == null) {
                    unsetData();
                } else {
                    if (value instanceof byte[]) {
                        setData((byte[])value);
                    } else {
                        setData((java.nio.ByteBuffer)value);
                    }
                }
                break;

        }
    }

    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case SESSION_ID:
                return getSessionId();

            case STATE:
                return getState();

            case DATA:
                return getData();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case SESSION_ID:
                return isSetSessionId();
            case STATE:
                return isSetState();
            case DATA:
                return isSetData();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof TRet)
            return this.equals((TRet)that);
        return false;
    }

    public boolean equals(TRet that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_sessionId = true && this.isSetSessionId();
        boolean that_present_sessionId = true && that.isSetSessionId();
        if (this_present_sessionId || that_present_sessionId) {
            if (!(this_present_sessionId && that_present_sessionId))
                return false;
            if (!this.sessionId.equals(that.sessionId))
                return false;
        }

        boolean this_present_state = true;
        boolean that_present_state = true;
        if (this_present_state || that_present_state) {
            if (!(this_present_state && that_present_state))
                return false;
            if (this.state != that.state)
                return false;
        }

        boolean this_present_data = true && this.isSetData();
        boolean that_present_data = true && that.isSetData();
        if (this_present_data || that_present_data) {
            if (!(this_present_data && that_present_data))
                return false;
            if (!this.data.equals(that.data))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetSessionId()) ? 131071 : 524287);
        if (isSetSessionId())
            hashCode = hashCode * 8191 + sessionId.hashCode();

        hashCode = hashCode * 8191 + state;

        hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
        if (isSetData())
            hashCode = hashCode * 8191 + data.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(TRet other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSessionId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetState()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetData()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("TRet(");
        boolean first = true;

        sb.append("sessionId:");
        if (this.sessionId == null) {
            sb.append("null");
        } else {
            sb.append(this.sessionId);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("state:");
        sb.append(this.state);
        first = false;
        if (!first) sb.append(", ");
        sb.append("data:");
        if (this.data == null) {
            sb.append("null");
        } else {
            org.apache.thrift.TBaseHelper.toString(this.data, sb);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class TRetStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TRetStandardScheme getScheme() {
            return new TRetStandardScheme();
        }
    }

    private static class TRetStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRet> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, TRet struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // SESSION_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.sessionId = iprot.readString();
                            struct.setSessionIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // STATE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.state = iprot.readI32();
                            struct.setStateIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // DATA
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.data = iprot.readBinary();
                            struct.setDataIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, TRet struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.sessionId != null) {
                oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
                oprot.writeString(struct.sessionId);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(STATE_FIELD_DESC);
            oprot.writeI32(struct.state);
            oprot.writeFieldEnd();
            if (struct.data != null) {
                oprot.writeFieldBegin(DATA_FIELD_DESC);
                oprot.writeBinary(struct.data);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TRetTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TRetTupleScheme getScheme() {
            return new TRetTupleScheme();
        }
    }

    private static class TRetTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRet> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TRet struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetSessionId()) {
                optionals.set(0);
            }
            if (struct.isSetState()) {
                optionals.set(1);
            }
            if (struct.isSetData()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetSessionId()) {
                oprot.writeString(struct.sessionId);
            }
            if (struct.isSetState()) {
                oprot.writeI32(struct.state);
            }
            if (struct.isSetData()) {
                oprot.writeBinary(struct.data);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TRet struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
            }
            if (incoming.get(2)) {
                struct.data = iprot.readBinary();
                struct.setDataIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

